## 题目地址
https://leetcode-cn.com/problems/next-permutation/

## 题目描述
```
实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

```

## 思路

- 一遍扫描

通过思考可以发现，该题的要点是在数组序列中寻找下一个更大排序。

那么可以通过从序列后面往前扫描，当发现当前值比后一个值要小的时候，这意味着从当前序列开始与后面的元素中存在一个更大数组

标记此处位置为i，若该数组不为降序数组，则再次从数据的后面扫描，当找到第一个比当前元素大位置j，交换它们的数值。

再把i位置后续的数组元素反转即可（即从从大到小 -> 从小到大）

时间复杂度O(N), 空间复杂度O(1)

官方题解：[这里](https://leetcode-cn.com/problems/next-permutation/solution/xia-yi-ge-pai-lie-by-leetcode/)

## 代码
```java
class Solution {
    public void nextPermutation(int[] nums) {
        if(nums.length < 2) return;
        if(nums.length == 2){
            swap(0, 1, nums);
            return;
        }
        

        int i = nums.length - 2;
        while(i >= 0 && nums[i] >= nums[i + 1]){
            i--;
        }
        if(i >= 0){ // i的记录很重，表征了当前数据是否已经是降序数组
            int j = nums.length - 1;
            while(nums[i] >= nums[j]){
                j--;
            }
            swap(i, j, nums);
        }

        reserse(nums, i + 1);
    }

    private void reserse(int[] nums, int start){
        int i = start, j = nums.length - 1;
        while(i < j){
            swap(i, j, nums);
            i++;
            j--;
        }
    }

    private void swap(int i, int j, int[] nums){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
```
