## 题目地址
https://leetcode-cn.com/problems/simplify-path/

## 题目描述
```
以 Unix 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。

在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；

两者都可以是复杂相对路径的组成部分。更多信息请参阅：Linux / Unix中的绝对路径 vs 相对路径

请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。

此外，规范路径必须是表示绝对路径的最短字符串。


Example 1:

输入："/home/"
输出："/home"
解释：注意，最后一个目录名后面没有斜杠。

Example 2:

输入："/../"
输出："/"
解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。

Exmaple 3:

输入："/home//foo/"
输出："/home/foo"
解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。


说明：

其他内容见题目源网站

```

## 思路

- 辅助栈法

1.此题主要考察的是栈,所以定义一个辅助栈;

2.先把字符串以"/"为分隔符分割成数组,此时数组有"路径"、""、"."、".."这四种情况;

3.遍历数组,当s[i].equals("..")并且栈不空时pop,当!s[i].equals("") && !s[i].equals(".") && !s[i].equals(".."),即s[i]是路径入栈;

4.栈空,返回"/",栈非空,用StringBuffer做一个连接返回即可;

5.完结。

## 代码
```java
// java
class Solution {
    public String simplifyPath(String path) {
        String[] s = path.split("/");   // 将字符串以"/"为间隔将其分割
        Stack<String> stack = new Stack<>();
        
        for(int i = 0; i < s.length; i++){
            if(!stack.isEmpty() && s[i].equals("..")){
                stack.pop();  // 对于".."的形式使其出栈
            }else if(!s[i].equals(".") && !s[i].equals("") && !s[i].equals("..")){
                stack.push(s[i]);  // 满足题目要求的字符将其入栈
            }
        }
        
        if(stack.isEmpty())
            return "/";
        
        StringBuffer res = new StringBuffer();
        for(int i = 0; i < stack.size(); i++){
            res.append("/" + stack.get(i));  // 最后将栈中的字符重新提取组合
        }
        
        return res.toString();
    }
}
```
